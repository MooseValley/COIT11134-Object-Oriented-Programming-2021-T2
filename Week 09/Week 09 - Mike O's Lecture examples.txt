******************************************************
COIT11134 Object Oriented Programming (2021-T2)
Week: 09
Course WEB Page (Moodle):         https://moodle.cqu.edu.au/course/view.php?id=21818
Course Coordinator:               Umapathy "Venu" Venugopal, Ph. 02 9324 5789, Sydney, Email: u.venugopal@cqu.edu.au
Rocky Teacher (Part-Time):        Mike O'Malley, m.omalley@cqu.edu.au
Mike O's GitHub for course/term:  https://github.com/MooseValley/Uni-COIT11134-Object-Oriented-Programming-2021-T2
Mike O'Malley's Java Videos:      http://tinyurl.com/MikesJavaVideos
******************************************************

ROAD MAP:
Week 01 - Revision of Java, Github review.
Week 02 - Inheritance
Week 03 - Polymorphism
Week 04 - GUI and Event Handling
Week 05 - GUI and Event Handling.  Next week: mid-term break
Week 06 - Exception Handling, and File IO
Week 07 - Interfaces and Inner Classes
Week 08 - Generic methods and classes
Week 09 - Generic classes    <--- YOU ARE HERE !
Week 10 - List and Algorithm
Week 11 - Stacks, Queues and Trees
Week 12 - Final Revision


LAST WEEK: Week 08
* Week 08 - Generic methods and classes

THIS WEEK: Week 09
* Week 09 - Generic classes    <--- YOU ARE HERE !
* Assignment 2 DUE at the end of Week 11: Friday, 1 October 2021, 11:59 PM



**************************************************
Tutorial and Lab Exercises – Week 9
EXTRAS
**************************************************

// Q1.B. How can you limit things so that the class must be a numeric class ?

So you cannot create objects like this:

Tour<String>  tour3 = new Tour<String>  ("Sydney", "Hello");
Tour<Student> tour4 = new Tour<Student> ("Mike",   "O");






// Q5: Students to create a single array list of All Studies and Tourse.
//     and find the Total of everything using that arraylist.


// Q6: Students to modify things so that the AllExpense creates the ArrayList internally,
//     and add an "Add" method so add data to this ArrayList.
// i.e. change this code:
        ArrayList<Study> allStudy = new ArrayList<Study>();
        allStudy.add(study1);
        allStudy.add(study2);

        AllExpense<Study> se = new AllExpense<Study>(allStudy);
        System.out.println( "Total of Study Expenses : $"+se.findTotal());

// so that it works like this (much simpler):
        AllExpense<Study> allExpenses = new AllExpense<Study>();
        allExpenses.add(study1);
        allExpenses.add(study2);
        System.out.println( "Total of Study Expenses : $" + allExpenses.findTotal());

EOF.
